apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "dokuwiki.names.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "dokuwiki.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
        helm.sh/chart: {{ printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      {{- if .Values.hostAliases }}
      # yamllint disable rule:indentation
      hostAliases: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      # yamllint enable rule:indentation
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
        - name: volume-permissions
          image: {{ .Values.volumePermissions.image.registry }}/{{ .Values.volumePermissions.image.repository }}:{{ .Values.volumePermissions.image.tag }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p "/bitnami/dokuwiki"
              chown -R "{{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}" "/bitnami/dokuwiki"
          securityContext:
            runAsUser: 0
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: dokuwiki-data
              mountPath: /bitnami/dokuwiki
        {{- end }}
        {{- if .Values.certificates.customCAs }}
        - name: certificates
          image: {{ template "certificates.image" . }}
          imagePullPolicy: {{ default .Values.image.pullPolicy .Values.certificates.image.pullPolicy }}
          imagePullSecrets:
          {{- range (default .Values.image.pullSecrets .Values.certificates.image.pullSecrets) }}
            - name: {{ . }}
          {{- end }}
          command:
          {{- if .Values.certificates.command }}
          command: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.certificates.command "context" $) | nindent 12 }}
          {{- else if .Values.certificates.customCertificate.certificateSecret }}
          - sh
          - -c
          - install_packages ca-certificates openssl
          {{- else }}
          - sh
          - -c
          - install_packages ca-certificates openssl
            && openssl req -new -x509 -days 3650 -nodes -sha256
              -subj "/CN=$(hostname)" -addext "subjectAltName = DNS:$(hostname)"
              -out  /etc/ssl/certs/ssl-cert-snakeoil.pem
              -keyout /etc/ssl/private/ssl-cert-snakeoil.key -extensions v3_req
          {{- end }}
          {{- if .Values.certificates.args }}
          args: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.certificates.args "context" $) | nindent 12 }}
          {{- end }}
          env: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.certificates.extraEnvVars "context" $) | nindent 12 }}
          envFrom:
            {{- if .Values.certificates.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "dokuwiki.tplvalues.render" (dict "value" .Values.certificates.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.certificates.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "dokuwiki.tplvalues.render" (dict "value" .Values.certificates.extraEnvVarsSecret "context" $) }}
            {{- end }}
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs
              readOnly: false
            - name: etc-ssl-private
              mountPath: /etc/ssl/private
              readOnly: false
            - name: custom-ca-certificates
              mountPath: /usr/local/share/ca-certificates
              readOnly: true
        {{- end }}
        {{- if .Values.initContainers }}
        {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: dokuwiki
          image: {{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.containerSecurityContext.runAsUser }}
          {{- end }}
          env:
            {{- if .Values.image.debug }}
            - name: BITNAMI_DEBUG
              value: "true"
            {{- end }}
            - name: DOKUWIKI_USERNAME
              value: {{ .Values.dokuwikiUsername | quote }}
            - name: DOKUWIKI_FULL_NAME
              value: {{ .Values.dokuwikiFullName | quote }}
            - name: DOKUWIKI_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "dokuwiki.names.fullname" . }}
                  key: dokuwiki-password
            - name: DOKUWIKI_EMAIL
              value: {{ .Values.dokuwikiEmail | quote }}
            - name: DOKUWIKI_WIKI_NAME
              value: {{ .Values.dokuwikiWikiName | quote }}
            - name: APACHE_HTTP_PORT_NUMBER
              value: {{ .Values.containerPorts.http | quote }}
            - name: APACHE_HTTPS_PORT_NUMBER
              value: {{ .Values.containerPorts.https | quote }}
              {{- if .Values.extraEnvVars }}
              {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
              {{- end }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "dokuwiki.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "dokuwiki.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.containerPorts.http }}
            - name: https
              containerPort: {{ .Values.containerPorts.https }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /doku.php
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- else if .Values.customLivenessProbe }}
          livenessProbe: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /doku.php
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- else if .Values.customReadinessProbe }}
          readinessProbe: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /doku.php
              port: http
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- else if .Values.customStartupProbe }}
          startupProbe: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.customStartupProbe "context" $) | nindent 12 }}
          {{- end }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.certificates.customCAs }}
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: false
            - name: etc-ssl-private
              mountPath: /etc/ssl/private/
              readOnly: false
            - name: custom-ca-certificates
              mountPath: /usr/local/share/ca-certificates
              readOnly: true
            {{- end }}
            {{- if .Values.certificates.customCertificate.certificateSecret }}
            - name: custom-certificate
              mountPath: {{ .Values.certificates.customCertificate.certificateLocation }}
              subPath: tls.crt
              readOnly: true
            - name: custom-certificate
              mountPath: {{ .Values.certificates.customCertificate.keyLocation }}
              subPath: tls.key
              readOnly: true
            {{- if .Values.certificates.customCertificate.chainSecret }}
            - name: custom-certificate-chain
              mountPath: {{ .Values.certificates.customCertificate.chainLocation }}
              subPath: {{ .Values.certificates.customCertificate.chainSecret.key }}
              readOnly: true
            {{- end }}
            {{- end }}
            {{- if .Values.customPostInitScripts }}
            - mountPath: /docker-entrypoint-init.d
              name: custom-postinit
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
            - name: dokuwiki-data
              mountPath: /bitnami/dokuwiki
        {{- if .Values.metrics.enabled }}
        - name: metrics
          image: {{ .Values.metrics.image.registry }}/{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
          command: [ '/bin/apache_exporter', '--scrape_uri', 'http://status.localhost:8080/server-status/?auto']
          ports:
          - name: metrics
            containerPort: 9117
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources: {{- toYaml .Values.metrics.resources | nindent 12 }}
        {{- end }}
        {{- if .Values.sidecars }}
        {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        {{- if .Values.certificates.customCAs }}
        - name: etc-ssl-certs
          emptyDir:
            medium: "Memory"
        - name: etc-ssl-private
          emptyDir:
            medium: "Memory"
        - name: custom-ca-certificates
          projected:
            defaultMode: 0400
            sources:
            {{- range $index, $customCA := .Values.certificates.customCAs }}
            - secret:
                name: {{ $customCA.secret }}
            {{- end }}
        {{- end }}
        {{- if .Values.certificates.customCertificate.certificateSecret }}
        - name: custom-certificate
          secret:
            secretName: {{ .Values.certificates.customCertificate.certificateSecret }}
        {{- if .Values.certificates.customCertificate.chainSecret }}
        - name: custom-certificate-chain
          secret:
            secretName: {{ .Values.certificates.customCertificate.chainSecret.name }}
        {{- end }}
        {{- end }}
        - name: dokuwiki-data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default (include "dokuwiki.names.fullname" .) .Values.persistence.existingClaim }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- if .Values.customPostInitScripts }}
        - name: custom-postinit
          configMap:
            name: {{ printf "%s-postinit" (include "dokuwiki.names.fullname" .) }}
            defaultMode: 0755
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "dokuwiki.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
